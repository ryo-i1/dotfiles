" Vundle settings below
set nocompatible  " be improved, required
filetype off      " required

" set the runtime path to include Vundle and initialize
set rtp+=~/vimfiles/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'

Plugin 'itchyny/lightline.vim'
Plugin 'jacoborus/tender.vim'
Plugin 'ryanoasis/powerline-extra-symbols'
Plugin 'scrooloose/nerdtree'

" All of your Plugins must be added before the folloing line

call vundle#end()           " required
filetype plugin indent on   " required
" To ignore plugin indent changes, insted use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


set encoding=utf-8
scriptencoding utf-8

" 行番号 を表示 "
set number
" wildmenu を表示 "
set wildmenu
" vimの範囲選択で文字がなくても右に進める "
" 行末の1文字先までカーソルを移動できるように "
set virtualedit=block,onemore
" 全角文字用の設定 "
set ambiwidth=double

" 大文字・小文字を区別しないで検索 "
set ignorecase
" 小文字で検索したとき、大文字も含める "
set smartcase
" インクリメンタル検索 "
set incsearch
" 検索結果をハイライト "
set hlsearch
" 検索が末尾まで進んだら、先頭から再検索 "
set wrapscan

" エラーメッセージの表示時にビープを鳴らさない
set noerrorbells
" Windowsでパスの区切り文字をスラッシュで扱う
set shellslash
" 対応する括弧やブレースを表示
set showmatch matchtime=1
" インデント方法の変更
set cinoptions+=:0
" メッセージ表示欄を2行確保
set cmdheight=2
" ステータス行を常に表示
set laststatus=2
" ウィンドウの右下にまだ実行していない入力中のコマンドを表示
set showcmd
" 省略されずに表示
set display=lastline
" タブ文字を CTRL-I で表示し、行末に $ で表示する
set list
" 行末のスペースを可視化
set listchars=tab:^\ ,trail:~
" コマンドラインの履歴を10000件保存する
set history=10000
" 入力モードでTabキー押下時に半角スペースを挿入
set expandtab
" インデント幅
set shiftwidth=4
" タブキー押下時に挿入される文字幅を指定
set softtabstop=4
" ファイル内にあるタブ文字の表示幅
set tabstop=4
" ツールバーを非表示にする
" set guioptions-=T
" yでコピーした時にクリップボードに入る
set guioptions+=a
" メニューバーを非表示にする
" set guioptions-=m
" 右スクロールバーを非表示
set guioptions-=R
" 対応する括弧を強調表示
set showmatch
" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent
" スワップファイルを作成しない
set noswapfile
" バックアップファイルを作成しない
set nobackup
" 検索にマッチした行以外を折りたたむ(フォールドする)機能
set nofoldenable
" タイトルを表示
set title
" ヤンクでクリップボードにコピー
set clipboard=unnamed,autoselect
" すべての数を10進数として扱う
" set nrformats=
" 行をまたいで移動
set whichwrap=b,s,h,l,<,>,[,],~

set mouse=
"set mouse=a  " バッファスクロール

" cursor
set cursorline
" Escを2回押すとハイライトが消える
nnoremap <Esc><Esc> :nohlsearch<CR><ESC>

" ビープ音を可視化
set visualbell
" コマンドラインの補完
set wildmode=list:longest
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk
" 文字コードを指定
set fenc=utf-8
" alias
:com R redraw!
" syntax
syntax on
set background=dark

" tender settings
if (has("termguicolors"))
    set termguicolors
endif
let g:cpp_class_scope_highlight = 1
colorscheme tender

" 括弧補完
" "inoremap { {}<LEFT>
" "inoremap ( ()<LEFT>
" "inoremap [ []<LEFT>
" "inoremap " ""<LEFT>
" "inoremap ' ''<LEFT>

" nerd tree
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" lightline settings
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('"fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ?  (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" airline settings
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#buffer_idx_mode = 1
"let g:airline#extensions#tabline#buffer_idx_format = {
"      \ '0': '0 ',
"      \ '1': '1 ',
"      \ '2': '2 ',
"      \ '3': '3 ',
"      \ '4': '4 ',
"      \ '5': '5 ',
"      \ '6': '6 ',
"      \ '7': '7 ',
"      \ '8': '8 ',
"      \ '9': '9 '
"      \}
"let g:airline#extensions#branch#enabled = 0
"let g:airline_powerline_fonts = 1
"let g:airline_theme = 'deus'
"let g:airline_deus_bg = 'light'

" 文字コード
set encoding=utf-8
" vim script の文字コード
scriptencoding utf-8
" ファイルの文字コード
set fileencoding=utf-8

"
" Vundle
"
set nocompatible
filetype off

set rtp+=~/vimfiles/bundle/Vundle.vim
call vundle#begin('$HOME/vimfiles/bundle')

Plugin 'VundleVim/Vundle.vim'
" Manage Plugins
Plugin 'itchyny/lightline.vim'
Plugin 'jacoborus/tender.vim'
Plugin 'ryanoasis/powerline-extra-symbols'
Plugin 'scrooloose/nerdtree'

call vundle#end()
filetype plugin indent on


"
" display
"
" タイトルを表示
set title
" 行番号 を表示
set number
" タブ文字を CTRL-I で表示し、行末に $ で表示する
set list
" 行末のスペースを可視化
set listchars=tab:^\ ,trail:~

" syntax highlight
syntax on
" syntax highlight を dark mode に合わせる
set background=dark
" カーソル行をハイライト
set cursorline
" 対応する括弧やブレースを表示
set showmatch matchtime=1

" 1 行が長すぎる場合途中まで表示する
set display=lastline
" 折りたたみを無効化
set nofoldenable
" エラー時の画面フラッシュを無効化
set visualbell t_vb=
" エラーメッセージの表示時にビープを鳴らさない
set noerrorbells


"
" status line
"
" ステータス行を常に表示
set laststatus=2
" メッセージ表示欄を 2 行確保
set cmdheight=2
" 補完候補を status line に表示
set wildmenu
" コマンドラインの補完, 候補の表示方法
set wildmode=list:longest
" ウィンドウの右下にまだ実行していない入力中のコマンドを表示
set showcmd


"
" move
"
" 範囲選択で文字がなくても右に進める
" 行末の 1 文字先までカーソルを移動できるように
set virtualedit=block,onemore
" 行をまたいで移動
set whichwrap=b,s,h,l,<,>,[,],~


"
" 検索
"
" 大文字・小文字を区別しないで検索
set ignorecase
" 小文字で検索したとき、大文字も含める
set smartcase
" インクリメンタル検索
set incsearch
" 検索結果をハイライト
set hlsearch
" 検索が末尾まで進んだら、先頭から再検索
set wrapscan


"
" インデント
"
" インデント方法の変更
set cinoptions+=:0
" 入力モードで Tab キー押下時に半角スペースを挿入
set expandtab
" インデント幅
set shiftwidth=4
" タブキー押下時に挿入される文字幅を指定
set softtabstop=4
" タブ文字の表示幅
set tabstop=4
" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent


"
" mouse
"
set mouse=a  " バッファスクロール

" disable mouse scroll
"nnoremap <ScrollWheelUp> <Nop>
"nnoremap <S-ScrollWheelUp> <Nop>
"nnoremap <C-ScrollWheelUp> <Nop>
"nnoremap <ScrollWheelDown> <Nop>
"nnoremap <S-ScrollWheelDown> <Nop>
"nnoremap <C-ScrollWheelDown> <Nop>
"inoremap <ScrollWheelUp> <Nop>
"inoremap <S-ScrollWheelUp> <Nop>
"inoremap <C-ScrollWheelUp> <Nop>
"inoremap <ScrollWheelDown> <Nop>
"inoremap <S-ScrollWheelDown> <Nop>
"inoremap <C-ScrollWheelDown> <Nop>
"xnoremap <ScrollWheelUp> <Nop>
"xnoremap <S-ScrollWheelUp> <Nop>
"xnoremap <C-ScrollWheelUp> <Nop>
"xnoremap <ScrollWheelDown> <Nop>
"xnoremap <S-ScrollWheelDown> <Nop>
"xnoremap <C-ScrollWheelDown> <Nop>


"
" key mappings
"
" Esc を 2 回押すとハイライトが消える
nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk
" `:R` で画面リロード
:com R redraw!

" 括弧補完
"inoremap { {}<LEFT>
"inoremap ( ()<LEFT>
"inoremap [ []<LEFT>
"inoremap " ""<LEFT>
"inoremap ' ''<LEFT>


"
" others
"
" 全角文字用の設定
set ambiwidth=double
" すべての数を10進数として扱う
set nrformats=
" Windows でパスの区切り文字をスラッシュで扱う
set shellslash
" ヤンクでクリップボードにコピー
set clipboard=unnamed,autoselect

" コマンドラインの履歴保存件数
set history=10000
" スワップファイルを作成しない
set noswapfile
" バックアップファイルを作成しない
set nobackup


"
" nerd tree
"
nnoremap <silent><C-e> :NERDTreeToggle<CR>


"
" lightline
"
" tender theme
if (has("termguicolors"))
    set termguicolors
endif
let g:cpp_class_scope_highlight = 1
colorscheme tender

" lightline
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('"fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ?  (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
